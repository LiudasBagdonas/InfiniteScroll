[{"C:\\Users\\liuda\\OneDrive\\Desktop\\ibm-task-one\\src\\index.js":"1","C:\\Users\\liuda\\OneDrive\\Desktop\\ibm-task-one\\src\\reportWebVitals.js":"2","C:\\Users\\liuda\\OneDrive\\Desktop\\ibm-task-one\\src\\app\\index.js":"3","C:\\Users\\liuda\\OneDrive\\Desktop\\ibm-task-one\\src\\app\\components\\GifBox\\index.js":"4","C:\\Users\\liuda\\OneDrive\\Desktop\\ibm-task-one\\src\\app\\components\\Popup\\index.js":"5"},{"size":302,"mtime":1612620469768,"results":"6","hashOfConfig":"7"},{"size":375,"mtime":1612620469789,"results":"8","hashOfConfig":"7"},{"size":3616,"mtime":1614766110814,"results":"9","hashOfConfig":"7"},{"size":587,"mtime":1613914084747,"results":"10","hashOfConfig":"7"},{"size":678,"mtime":1612623551569,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1hg3kto",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\liuda\\OneDrive\\Desktop\\ibm-task-one\\src\\index.js",[],["24","25"],"C:\\Users\\liuda\\OneDrive\\Desktop\\ibm-task-one\\src\\reportWebVitals.js",[],"C:\\Users\\liuda\\OneDrive\\Desktop\\ibm-task-one\\src\\app\\index.js",["26"],"import './index.scss';\r\nimport { useState, useEffect } from 'react';\r\nimport GifBox from './components/GifBox';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport Popup from './components/Popup';\r\n\r\nfunction App() {\r\n\r\n    const [gifs, setGifs] = useState([])\r\n    const [keyword, setKeyword] = useState('')\r\n    const [error, setError] = useState('')\r\n    const [gifsCount, setGifsCount] = useState(0)\r\n    const [moreGifs, setMoreGifs] = useState(true)\r\n    const [selectedGif, setSelectedGif] = useState({})\r\n    const [selectedGifBoxVisibility, setSelectedGifBoxVisibility] = useState(false)\r\n    const [toggle, setToggle] = useState(true)\r\n\r\n    const giphyQuery = \"https://api.giphy.com/v1/gifs/search?q=\" + keyword + \"&limit=\" + gifsCount + \"&api_key=qcxxaTUykVLrYTfCEUFXcNVowsiVteTH\"\r\n\r\n    useEffect(() => {\r\n        if (keyword.match(/^[0-9a-zA-Z]+$/)) {\r\n            fetch(giphyQuery)\r\n                .then(res => res.json())\r\n                .then(data => setGifs(data.data))\r\n            setError('')\r\n        } else if (gifsCount > 0 && !keyword.match(/^[0-9a-zA-Z]+$/) && keyword !== '') {\r\n            setError('Only letters and numbers allowed, sir.')\r\n        }\r\n\r\n    }, [keyword, gifsCount])\r\n\r\n    const submit = e => {\r\n        e.preventDefault()\r\n        let inputValue = document.getElementById('searchInput').value\r\n        \r\n        if (inputValue !== '') {\r\n            setMoreGifs(true);\r\n            setGifsCount(12);\r\n            setError('')\r\n            setToggle(!toggle)\r\n            setKeyword(inputValue)\r\n        } else {\r\n            setError('Nothing entered.')\r\n        }\r\n    }\r\n\r\n    const fetchMoreData = () => {\r\n        setTimeout(() => {\r\n            if (gifsCount >= 48) {\r\n                setMoreGifs(false);\r\n                return;\r\n            } else {\r\n                setGifsCount(gifsCount + 12)\r\n                setMoreGifs(true);\r\n            }\r\n        }, 1000);\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Popup\r\n                setSelectedGif={setSelectedGif}\r\n                selectedGif={selectedGif}\r\n                setSelectedGifBoxVisibility={setSelectedGifBoxVisibility}\r\n                selectedGifBoxVisibility={selectedGifBoxVisibility}\r\n            />\r\n            <main className='main'>\r\n                <h1>Find your gif</h1>\r\n                <form onSubmit={(e) => submit(e)}>\r\n                    <label>\r\n                        <input id=\"searchInput\" name=\"keyword\" type=\"text\" placeholder=\"Enter word\"/>\r\n                    </label>\r\n                    <button>Search</button>\r\n                </form>\r\n                {error === '' ? '' : <p className='search-error'>{error}</p>}\r\n                <InfiniteScroll\r\n                    dataLength={gifsCount}\r\n                    next={fetchMoreData}\r\n                    hasMore={moreGifs}\r\n                    endMessage={\r\n                        <p className='end-text'>Thats it, folks!</p>\r\n                    }\r\n                >\r\n                    <section className={`gifs-section error--${error !== '' ? 'true' : 'false'}`}>\r\n                        {gifs.map((gif) => (\r\n                            <GifBox\r\n                                setSelectedGif={setSelectedGif}\r\n                                setSelectedGifBoxVisibility={setSelectedGifBoxVisibility}\r\n                                key={gif.id} title={gif.title} url={gif.embed_url}></GifBox>\r\n                        ))}\r\n                    </section>\r\n                </InfiniteScroll>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\liuda\\OneDrive\\Desktop\\ibm-task-one\\src\\app\\components\\GifBox\\index.js",[],"C:\\Users\\liuda\\OneDrive\\Desktop\\ibm-task-one\\src\\app\\components\\Popup\\index.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":30,"column":8,"nodeType":"33","endLine":30,"endColumn":28,"suggestions":"34"},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'giphyQuery'. Either include it or remove the dependency array.","ArrayExpression",["37"],"no-global-assign","no-unsafe-negation",{"desc":"38","fix":"39"},"Update the dependencies array to be: [keyword, gifsCount, giphyQuery]",{"range":"40","text":"41"},[1211,1231],"[keyword, gifsCount, giphyQuery]"]